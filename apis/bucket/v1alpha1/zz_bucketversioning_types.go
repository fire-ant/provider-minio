/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketVersioningObservation struct {
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	VersioningConfiguration []VersioningConfigurationObservation `json:"versioningConfiguration,omitempty" tf:"versioning_configuration,omitempty"`
}

type BucketVersioningParameters struct {

	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// +kubebuilder:validation:Optional
	VersioningConfiguration []VersioningConfigurationParameters `json:"versioningConfiguration,omitempty" tf:"versioning_configuration,omitempty"`
}

type VersioningConfigurationObservation struct {
	ExcludeFolders *bool `json:"excludeFolders,omitempty" tf:"exclude_folders,omitempty"`

	ExcludedPrefixes []*string `json:"excludedPrefixes,omitempty" tf:"excluded_prefixes,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type VersioningConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	ExcludeFolders *bool `json:"excludeFolders,omitempty" tf:"exclude_folders,omitempty"`

	// +kubebuilder:validation:Optional
	ExcludedPrefixes []*string `json:"excludedPrefixes,omitempty" tf:"excluded_prefixes,omitempty"`

	// +kubebuilder:validation:Required
	Status *string `json:"status" tf:"status,omitempty"`
}

// BucketVersioningSpec defines the desired state of BucketVersioning
type BucketVersioningSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketVersioningParameters `json:"forProvider"`
}

// BucketVersioningStatus defines the observed state of BucketVersioning.
type BucketVersioningStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketVersioningObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BucketVersioning is the Schema for the BucketVersionings API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,minio}
type BucketVersioning struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.bucket)",message="bucket is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.versioningConfiguration)",message="versioningConfiguration is a required parameter"
	Spec   BucketVersioningSpec   `json:"spec"`
	Status BucketVersioningStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketVersioningList contains a list of BucketVersionings
type BucketVersioningList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketVersioning `json:"items"`
}

// Repository type metadata.
var (
	BucketVersioning_Kind             = "BucketVersioning"
	BucketVersioning_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BucketVersioning_Kind}.String()
	BucketVersioning_KindAPIVersion   = BucketVersioning_Kind + "." + CRDGroupVersion.String()
	BucketVersioning_GroupVersionKind = CRDGroupVersion.WithKind(BucketVersioning_Kind)
)

func init() {
	SchemeBuilder.Register(&BucketVersioning{}, &BucketVersioningList{})
}
