/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupPolicyObservation struct {
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`
}

type GroupPolicyParameters struct {

	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`
}

// GroupPolicySpec defines the desired state of GroupPolicy
type GroupPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupPolicyParameters `json:"forProvider"`
}

// GroupPolicyStatus defines the observed state of GroupPolicy.
type GroupPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GroupPolicy is the Schema for the GroupPolicys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,minio}
type GroupPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.group)",message="group is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.policy)",message="policy is a required parameter"
	Spec   GroupPolicySpec   `json:"spec"`
	Status GroupPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupPolicyList contains a list of GroupPolicys
type GroupPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupPolicy `json:"items"`
}

// Repository type metadata.
var (
	GroupPolicy_Kind             = "GroupPolicy"
	GroupPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupPolicy_Kind}.String()
	GroupPolicy_KindAPIVersion   = GroupPolicy_Kind + "." + CRDGroupVersion.String()
	GroupPolicy_GroupVersionKind = CRDGroupVersion.WithKind(GroupPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupPolicy{}, &GroupPolicyList{})
}
