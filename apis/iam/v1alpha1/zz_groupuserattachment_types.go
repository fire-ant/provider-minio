/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupUserAttachmentObservation struct {
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

type GroupUserAttachmentParameters struct {

	// +kubebuilder:validation:Optional
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// +kubebuilder:validation:Optional
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

// GroupUserAttachmentSpec defines the desired state of GroupUserAttachment
type GroupUserAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupUserAttachmentParameters `json:"forProvider"`
}

// GroupUserAttachmentStatus defines the observed state of GroupUserAttachment.
type GroupUserAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupUserAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GroupUserAttachment is the Schema for the GroupUserAttachments API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,minio}
type GroupUserAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.groupName)",message="groupName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.userName)",message="userName is a required parameter"
	Spec   GroupUserAttachmentSpec   `json:"spec"`
	Status GroupUserAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupUserAttachmentList contains a list of GroupUserAttachments
type GroupUserAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupUserAttachment `json:"items"`
}

// Repository type metadata.
var (
	GroupUserAttachment_Kind             = "GroupUserAttachment"
	GroupUserAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupUserAttachment_Kind}.String()
	GroupUserAttachment_KindAPIVersion   = GroupUserAttachment_Kind + "." + CRDGroupVersion.String()
	GroupUserAttachment_GroupVersionKind = CRDGroupVersion.WithKind(GroupUserAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupUserAttachment{}, &GroupUserAttachmentList{})
}
